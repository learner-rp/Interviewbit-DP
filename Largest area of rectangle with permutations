// Largest area of rectangle with permutations
// Time Complexity O(n^3)
// Space Complexity O(n^2)

vector<vector<int>> dp;

int getans(int up,int down,vector<vector<int>> &A){
    if(down==A.size()) return 0;
    if(dp[up][down]!=-1) return dp[up][down];
    int count=0,curr=0;
    for(int i=0;i<A[0].size();i++) 
        if(down-up+1<=A[down][i]) count++;
    curr=count*(down-up+1);
    return dp[up][down]=max(curr,max(getans(up,down+1,A),getans(down+1,down+1,A)));
}

int Solution::solve(vector<vector<int> > &A) {
    dp.assign(A.size(),vector<int> (A.size(),-1));
    for(int i=1;i<A.size();i++)
        for(int j=0;j<A[0].size();j++)
            if(A[i][j]==1) A[i][j]=1+A[i-1][j];
            else A[i][j]=0;
    return getans(0,0,A);
}
